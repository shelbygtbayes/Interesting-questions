class MedianFinder {
public:
    /** initialize your data structure here. */
    int n;
    vector<int> arr;
    //priority_queue<int> maxheap;
    //priority_queue<int , vector<int> , greater<int> > minheap;
    double ans;
    MedianFinder() {
        n = 0;
        ans = 0.0;
    }
    
    void addNum(int num) {
        n++;
        if(arr.size() == 0)
            arr.push_back(num);
        else
        {
            auto it = upper_bound(arr.begin() , arr.end() , num-1);        
            arr.insert(it , 1 , num);    
        }
        
        if(n%2)
        {
            ans = arr[n/2];
        }
        else
        {
            ans = (arr[n/2] + arr[n/2-1])/2.0;
        }

    }
    
    double findMedian() {
        return ans;
    }
};

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder* obj = new MedianFinder();
 * obj->addNum(num);
 * double param_2 = obj->findMedian();
 *      1 2 3 4 5
        0 2 3 4 5
        MaxH ( 0 to n/2-1 )  MinH ( n/2  to n - 1)    n%2     Median 
    2       2                   2                    1         MinH 2   
    3       2                   3                    0        2+3/2
    4       2                   3                    1          MinH 3
    0       2                   3                    0         2+3/2
    5       2                   3                    1          MinH 3
  */
    
