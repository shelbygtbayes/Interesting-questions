Question : How to determine the median of Array of Integers at run-time ?
                            i.e
            Integers are adding up to the array dynamically and we have to determine the median at each point
            
Example : 6 , 4 , 0 , 2           --> 2+4/2 = 3
          6 , 4 , 0 , 2 , 12      --> 4
          6 , 4 , 0 , 2 , 12 , 5  --> 4+5/2 = 3.5
          and so on..
          
There are so many ways around this problem, that frankly, it is scary. Here are a few more that I came across:

1) Buckets! If the numbers in the stream are statistically distributed,
then it is easier to keep track of buckets where the median would land,
than the entire array. Once you know the correct bucket, simply sort it find the median. 
If the bucket size is significantly smaller than the size of input processed, 
this results in huge time saving. @mitbbs8080 has an interesting implementation here.

2) Reservoir Sampling. Following along the lines of using buckets: if the stream is statistically distributed,
you can rely on Reservoir Sampling. Basically, if you could maintain just one good bucket (or reservoir)
which could hold a representative sample of the entire stream, you could estimate the median of the entire 
stream from just this one bucket. This means good time and memory performance. 
Reservoir Sampling lets you do just that. Determining a "good" size for your reservoir? Now, that's a whole other challenge.
A good explanation for this can be found in this StackOverflow answer. 
https://stackoverflow.com/questions/10657503/find-running-median-from-a-stream-of-integers/10693752#10693752

3) Segment Trees are a great data structure 
if you need to do a lot of insertions or a lot of read queries over a limited range of input values.
They allow us to do all such operations fast and in roughly the same amount of time, always.
The only problem is that they are far from trivial to implement. 

4) Order Statistic Trees are data structures which seem to be tailor-made for this problem.
They have all the nice features of a BST, but also let you find the kthk^{th}kth order element stored in the tree.
They are a pain to implement and no standard interview would require you to code these up. 
But they are fun to use if they are already implemented in the language of your choice. [5]
https://leetcode.com/articles/a-recursive-approach-to-segment-trees-range-sum-queries-lazy-propagation/#
